{"name":"Lazylimiter","tagline":"Do just enough, no more, no less.","body":"LazyLimiter\r\n================\r\nDo just enough, no more, no less.\r\n\r\nA clean yet fast lookahead limiter written in Faust.\r\nIt uses somewhat of a 'brute force' algorithm , so it's quite CPU-hungry.\r\n\r\n#features\r\n\r\n* brick-wall limiter\r\n* starts fading down before each peak\r\n * fade down can be anything between linear, and strongly exponential\r\n* will not start fading up if it needs to be down at least the same amount soon\r\n* the elaborate auto release algorithm allows you to set a musical trade-off between clean and loud\r\n\r\nIn combination, these features provide the holy grail of limiters: fast reaction on peaks, yet hardly any distortion on sustained material.\r\nSine waves even have zero distortion down to the very low bass, at any level.\r\n\r\nThe cost is heavy CPU usage, and a lot of latency (186 ms by default)\r\n\r\n#usage:\r\n\r\n## distortion control\r\nThis section controls the amount of distortion, versus the amount of gain reduction.\r\nIt can provide gain reduction completely without distorting, yet still reacts quick to transients.\r\nSet the minimum hold time from the next section to full and the anti pump from the 3rd section to 0, to hear this effect.\r\nWhile very clean, this sound has two problems:  \r\n1. It can be a bit too conservative. The dynamic hold section can fix that.  \r\n2. Simultaneously, it releases to quick in quiet parts. The musical release section fixes that.  \r\n### input gain\r\nInput gain in dB\r\n### threshold\r\nmaximum output level in dB\r\n### attack shape\r\n0 gives a linear attack (slow), 1 a strongly exponential one (fast).\r\nLinear sounds cleaner, exponential punchier/louder.  \r\nThis is how the curve of the attack varies it's shape:\r\n![](https://github.com/magnetophon/LazyLimiter/raw/master/docs/attack.gif)\r\n### minimum release time\r\nMinimum time in ms for the GR to go up\r\n### stereo link\r\n0 means independent, 1 fully linked\r\n\r\n## dynamic hold\r\nThe GR will not go up if it has to be back here within the hold time.\r\n### maximum hold time\r\nmaximum hold time in ms\r\n### minimum hold time\r\nminimum hold time in ms\r\n### dynHold\r\nshorten the hold time when the GR is below AVG\r\n### dynHoldPow\r\nshape the curve of the hold time\r\n### dynHoldDiv\r\nscale the curve of the hold time\r\n\r\n##  musical release\r\nthis section fine tunes the release to sound musical\r\n### base release rate\r\nrelease rate when the GR is at AVG, in dB/s\r\n### transient speed\r\nspeed up the release when the GR is below AVG\r\n### anti pump\r\nslow down the release when the GR is above AVG\r\n###  AVG attack \r\ntime in ms for the AVG to go down \r\n###  AVG release \r\ntime in ms for the AVG to go up\r\n\r\n## metering section:\r\n- gain reduction in dB\r\n- average gain reduction in dB\r\n- hold time in ms\r\n\r\n#Inner workings\r\n\r\n## conceptual idea\r\nHere is a block-diagram to help explain:\r\n![](https://github.com/magnetophon/LazyLimiter/raw/master/docs/blockDiagram-svg/process.svg) \r\n\r\nIn this example, the lookahead time has been set to 4 samples, and it's a simplified implementation.\r\nThe actual limiter uses 8192 at a samplerate of 44100, and even more at higher samplerates.\r\nAs with any lookahead limiter, there is a block calculating the gain reduction (GR), and that value is multiplied with the delayed signal.\r\n\r\nNotice that all values inside GainCalculator are in dB:\r\n0dB meaning no gain reduction, and -infinate meaning full gain reduction; silence, and \r\nIn other words, the smaller the value, the more gain reduction.\r\n\r\nInside the GainCalculator, there are 3 blocks doing the work: attackGainReduction, hold and releaseEnvelope.  \r\n1. attackGainReduction calculates gradual fade down towards the eventual gain reduction.  \r\n2. hold makes sure we don't fade back up if we need to be down at least the same amount soon.  \r\nTogether they make up minimumGainReduction.  \r\n3. this goes into releaseEnvelope, to tweak the release to be musical.  \r\n\r\n###attackGainReduction\r\n\r\nThe attack is calculated as follows:\r\n- currentdown represents the amount of decibels we need to go down for the current input sample to stay below the threshold.\r\n- we make an array of 4, as follows:  \r\n    currentdown@1*(1/4)  \r\n    currentdown@2*(2/4)  \r\n    currentdown@3*(3/4)  \r\n    currentdown@4*(4/4)  \r\n- we take the minimum value of this array\r\nIn effect, we have created a constantly moving linear fade-down with a duration of 4 samples.\r\n\r\n###hold\r\n\r\nHold works as follows:\r\n- lastdown represents the amount of decibels we where down at the previous sample, iow a feedback loop coming from the end of the GainCalculator.\r\n- we make an array of 4, as follows:  \r\n(currentdown@(0):max(lastdown))  \r\n(currentdown@(1):max(lastdown))  \r\n(currentdown@(2):max(lastdown))  \r\n(currentdown@(3):max(lastdown))  \r\n- again we take the minimum of these values.\r\n- in plain English: we check if any of the coming samples needs the same or more gain reduction then we currently have, and if so, we stay down.\r\n\r\n###releaseEnvelope\r\n\r\nWe take the minimum of attack and hold, and enter it into the release function, which is just a 0 attack, logarithmic release envelope follower.\r\nThis is the signal that is multiplied with the delayed audio, as mentioned in the explanation of attack.\r\n\r\n## actual implementation:\r\n\r\nYou can choose the maximum attack and hold time at compile time by changing [maxAttackTime](https://github.com/magnetophon/LazyLimiter/blob/master/GUI.lib#L38) and [maxHoldTime](https://github.com/magnetophon/LazyLimiter/blob/master/GUI.lib#L30).\r\nThis way various comromises between quality and CPU usage can be made.\r\nThey are scaled with samplerate, but you have to [manually set it](https://github.com/magnetophon/LazyLimiter/blob/master/GUI.lib#L21) at compile time.\r\n\r\nI've made the shape of the attack curve variable, by putting a wave-shaping function after the \"1/4 trough 4/4\" of the attack example.\r\nBoth the hold time and the time of the releaseEnvelope automatically adapt to the input material.\r\n\r\nI am looking for ways to reduce the amount of parameters, either by choosing good defaults or by inteligently coupling them.\r\n\r\n# Thanks\r\nI got a lot of [inspiration](https://github.com/sampov2/foo-plugins/blob/master/src/faust-source/compressor-basics.dsp#L126-L139) from Sampo Savolainens [foo-plugins](https://github.com/sampov2/foo-plugins).\r\n\r\nMy first implementation was a lot like the blockdiagram in the explantion; at usable predelay values it ate CPU's for breakfast.\r\n[Yann Orlarey](http://www.grame.fr/qui-sommes-nous/compositeurs-associes/yann-orlarey) provided [the brainpower to replace the cpu-power](https://github.com/magnetophon/LazyLimiter/blob/master/LazyLimiter.lib#L54-L66) and made this thing actually usable!\r\n\r\nMany thanks, also to the rest of the Faust team!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}