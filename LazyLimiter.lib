/*
 *  Copyright (C) 2014 Bart Brouns
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; version 2 of the License.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 */

/*some building blocks where taken from or inspired by compressor-basics.dsp by Sampo Savolainen*/

declare name      "LazyLimiter";
declare author    "Bart Brouns";
declare version   "0.3";
declare copyright "(C) 2014 Bart Brouns";

import ("music.lib");  //for linear2db
import("reduce.lib");
//todo: mid-side, auto-release

currentLevel(x)     = ((abs(x)):linear2db);
currentdown(x)      = 0-(((currentLevel(x))-(threshold-inGain)):max(0));

// smoothing function, 0 attack, release coefficient "r" and signal x
releaseEnv(r, x) = x:(env(r))~_
with {
    env (r, prevx, x)= select2( (x > prevx), x, (x*r)+(prevx * (1-r))     );
};

time_ratio_release(t) = exp(1) / ( t * SR);// * time_ratio_target_rel );

// slidemin by Yann Orlarey, with variable_hold by Bart Brouns.
// 2*k : number of windows, w : size of the window in samples
// total window siz in samples: 2*k*w
// example _ : slidemin(16,16) : _
slidemin(k,w,x) = fixed_hold(w,x) : pmin(k,w)
  with {
    variable_hold(w,x) =
      0:seq(i,maxWinSize,
       (((i+1)>(maxWinSize-w))*(x@(i))),_: min
      );

    fixed_hold(w,x) =
      0:seq(i,maxWinSize,
       ((x@(i))),_: min
      );
    smin(n) = F ~ (_,_) : !,_
      with {
        F(k,m,x) = (k+1)%n, if(k==0, x, min(x,m));
        if(c,t,e) = select2(c,e,t);
      };
    pmin(1,w) = _ <: _ , @(w) : min;
    pmin(k,w) = _ <: pmin(1,w), (@(2*w) : pmin(k-1,w)) : min;
  };

// by Yann Orlarey
// 2*k : number of windows, w : size of the window in samples
// example _ : slidemax(7,16) : _
slidemax(k,w) = smax(w) : pmax(k,w)
  with {
    smax(n) = F ~ (_,_) : !,_
      with {
        F(k,m,x) = (k+1)%n, if(k==0, x, max(x,m));
        if(c,t,e) = select2(c,e,t);
      };
    pmax(1,w) = _ <: _ , @(w) : max;
    pmax(k,w) = _ <: pmax(1,w), (@(2*w) : pmax(k-1,w)) : max;
  };

Lookahead(x,lastdown,avgLevel) =
// attackGRYann,
attackGRrelative,
// attackGR,
// Yann_hold(x)
// variable_hold(maxHoldTime,winSize,x)
// block_hold_semivar(x)
// block_hold_var(x)
block_hold(x)
// (fixed_hold(maxHoldTime,currentdown(x)):max(lastdown))
// variable_hold(maxHoldTime,holdTime,x)
:min//:min(currentdown(x)@maxHoldTime)// todo: remove this hack without getting overshoot
// ;
// lastdown = -0.002;
with {
    // this one should be more efficient: fixed hold time
    // fixed_hold = ( 0:seq(i,maxHoldTime,(currentdown(x)@(i):max(lastdown)),_: min ));
    fixed_hold(w,x) =
      0:seq(i,w,
       ((x@(i))),_: min
      );
      // x:minn(w);
    // yet this one is more efficient: variable hold time
    variable_hold(maxSize,size,x) =
      0:seq(i,maxSize,
       (((maxSize-i)<=(size))*(currentdown(x)@(i))),_: min
       // (((i+1)>(maxSize-size))*(currentdown(x)@(i))),_: min
      // ):max(lastdown):min(currentdown(x)@maxHoldTime);
      ):max(lastdown);

    block_hold(x) = ( 0:seq(i,int(maxHoldTime/maxWinSize),((fixed_hold(maxWinSize,currentdown(x))@(i*maxWinSize))),_:min )):max(lastdown);
  block_hold_semivar(x) =
    ( (0)
      :seq(i,int(maxHoldTime/maxWinSize),((fixed_hold(maxWinSize,currentdown(x))@(i*maxWinSize)*((int(maxHoldTime/maxWinSize)-i)<=ceil(winSize/maxWinSize)))),_:min )
    ):max(lastdown);

  block_hold_var_OLD(x) =
    ( (variable_hold(maxWinSize,((decimal(winSize/maxWinSize))*maxWinSize),x@(floor(winSize/maxWinSize)*maxWinSize)))
      :seq(i,int(maxHoldTime/maxWinSize),((fixed_hold(maxWinSize,currentdown(x))@(i*maxWinSize)*((int(maxHoldTime/maxWinSize)-i)<=floor(winSize/maxWinSize)))),_:min )
    ):max(lastdown);

  block_hold_var(x) =
    ( 0:seq(i,int(maxHoldTime/maxWinSize),(variable_hold(maxWinSize,((decimal(winSize/maxWinSize))*maxWinSize),x)@(i*maxWinSize)*(((floor(winSize/maxWinSize)==i)))),_:min )
      :seq(i,int(maxHoldTime/maxWinSize),((fixed_hold(maxWinSize,currentdown(x))@(i*maxWinSize)*((int(maxHoldTime/maxWinSize)-i)<=floor(winSize/maxWinSize)))),_:min )
    ):max(lastdown);

// winSize = int((holdTime):max(minHoldTime)):dhMeter;
// winSize = int((holdTime/(1+(((((avgLevel-lastdown):max(0)))*dynHold)))):max(minHoldTime)):dhMeter;
winSize = int((holdTime/(1+(((((avgLevel-lastdown):max(0))/dynHoldDiv):pow(dynHoldPow):max(0)*dynHold*dynHoldDiv)))):max(minHoldTime):dhMeter);
block_hold_va(size,block) = _ <: variable,par(i,int(rmsMaxSize/block), integrate(block)@(int(i*block))*(i<floor(size/block))) :> _ with {
  // variable = delaysum(size:min(block),block);
  variable = @(floor(size/block)*block):delaysum(int(decimal(size/block)*block),block);
  };

    Yann_hold(x)=  slidemin(nrWin,winSize,currentdown(x)) : max(lastdown)
    with {
      winSize = maxWinSize;
      // winSize = ((holdTime/(1+(((((avgLevel-lastdown):max(0))/dynHoldDiv):pow(dynHoldPow):max(0)*dynHold*dynHoldDiv)))):max(minHoldTime):dhMeter);
    };
    /*attackGRYann = currentdown(x)<:pmin(maxAttackTime)*/
    /*with {*/
      /*pmin(del,mini,1) = del <: @(1), (mini         ,(@(1)*((1/maxAttackTime):attackShaper)) : min);*/
      /*pmin(del,mini,k) = del <: @(1), (del,mini:pmin(k-1) ,(@(1)*((k/maxAttackTime):attackShaper))  : min);*/
    /*};*/
    attackGRYann =
      (0,(currentdown(x))@(maxHoldTime-maxAttackTime)):seq(i,maxAttackTime,
        (
          (_,
            (
               ((_')<:(_,_)):
               (
                (_ *(((i+1)/maxAttackTime):attackShaper))
                ,_
               )
            )
          )
          :min,_
        )
      ):(_,!);
    attackGR =
       0: seq(i,maxAttackTime,
         (currentdown(x)@(i+1-maxAttackTime+maxHoldTime))*(((i+1)/maxAttackTime):attackShaper),_: min
       );
      // in theory, attackGRrelative  should give lower distortion, since the gain curve is smooth.
      // neither my ear nor measurements confirm this.
      // the non-relative version tkes much less CPU, so can work with a much longer attack-time,
      // which does lower distorion (at least for linear attack)
      // oddly enough, with minimalStereoLimiter, the both variants use about the same amount of CPU
    attackGRrelativeOLD =
       (0: seq(i,maxAttackTime,
            // ((((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastRel(i))*(((i+1)/maxAttackTime):attackShaperI(i)))+lastRel(i))),_: min
            ((((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastRel(i))*(((i+1)/maxAttackTime):attackShaper))+lastRel(i)):(_<:((_<lastRel(i) ),_):*)),_: min
         // ((((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastRel(i))*(((i+1)/maxAttackTime):attackShaper))+lastRel(i)):(_<:((_<=lastdown),_):*)),_: min
         // ((((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastRel(i) )*(((i+1)/maxAttackTime):attackShaper))+lastRel(i))*(currentdown(x)@(i+1-maxAttackTime+maxHoldTime)<lastdown@(i+1))),_: min
      // ((((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastRel(i) )*(((i+1)/maxAttackTime):attackShaper))+lastRel(i))*(currentdown(x)@(i+1-maxAttackTime+maxHoldTime)<lastdown)),_: min
       // ));
       ));
    attackGRrelative =
       (0: seq(i,maxAttackTime,
            // ((lastRel(i)+((currentdown(x)@(i+1-maxAttackTime+maxHoldTime))*(((1)/maxAttackTime)))):(_<:((_<lastdown),_):*)),_: min
            // ((((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastRel(i))*(((i+1)/maxAttackTime):attackShaper))+lastRel(i)):(_<:((_<lastdown),_):*)),_: min
            ((((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastdown)*(((i+1)/maxAttackTime):newshape))+lastdown):(_<:((_<lastdown),_):*)),_: min
            // ((((((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastdown)*((i+1)/maxAttackTime)/(currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastdown):newshape)*(currentdown(x)@(i+1-maxAttackTime+maxHoldTime)-lastdown)))+lastdown):(_<:((_<lastdown),_):*)),_: min
       )):min(currentdown(x)@maxHoldTime);
       // newshape(s) = ((sin(((s)*PI)-(0.5*PI))+1)/2):pow(1+(attack*40));
       add =       hslider("add", 0, 0, 1, 0.001)/10;
       newshape(s) = s*(attack:pow(10));
       // newshape = ((_+add):pow(1+(attack*40)))-(add:pow(1+(attack*40)));
       // newshape = _;
    // lastRel = select2((currentdown(x)@maxHoldTime)>(currentdown(x)@maxHoldTime+1),0,lastdown)@(-maxAttackTime+maxHoldTime);
    // lastRel(i) = 0;
    // lastRel(i) = select2((lastdown<=lastdown'),lastdown,_)~_;
    // lastRel(i) = lastdown;
    lastRel(i) = lastdown@(i):max(lastdown);
    // lastRel(i) = lastdown@(i):max(lastdown);
    // lastRel(i) = lastdown@(i-maxAttackTime+maxHoldTime); // stays down
    // lastRel(i) = select2((currentdown(x)@(i+1-maxAttackTime+maxHoldTime)<=lastdown),lastdown,_)~_;
    // lastRel(i) = select2((currentdown(x)@(-maxAttackTime+maxHoldTime)>=currentdown(x)@(1-maxAttackTime+maxHoldTime)),lastdown,_)~_;
    // lastRel = select2(lastdown>(currentdown(x)@maxHoldTime+1),0,lastdown)@(-maxAttackTime+maxHoldTime);
    // lastRel = select2((lastdown@(-maxAttackTime+maxHoldTime))<currentdown(x)@(1-maxAttackTime+maxHoldTime),0,lastdown@(-maxAttackTime+maxHoldTime));
    attackShaperHalf(fraction)= attackShaperHalf(fraction);
    // attackShaperI(i,fraction)= select2(currentdown(x)@(i+1-maxAttackTime+maxHoldTime)>lastdown,attackShaperHalf(fraction),32/maxAttackTime);
    attackShaperI(i,fraction)= select2(currentdown(x)@(i+1-maxAttackTime+maxHoldTime)>lastdown,attackShaperHalf(fraction),((attackShaperHalf((fraction*-1)+1)*-1)+1));
    // attackShaper(fraction)= select2(currentdown(x)@maxHoldTime>lastdown,attackShaperHalf(fraction),((attackShaperHalf((fraction*-1)+1)*-1)+1));
    attackShaper(fraction)= tanh(fraction:pow(attack:attackScale)*(attack*5+.1))/tanh(attack*5+.1);
    // attackShaperLookup takes shorter to compile, but uses slightly more cpu than attackShaper, even though the later has a fixed attack shape.
    attackShaperLookup(x)= rdtable(maxAttackTime, ( tanh((time/maxAttackTime):pow(attack:attackScale)*(attack*5+.1))/tanh(attack*5+.1)),int(x*maxAttackTime))
      with { attack = 1; };
    //attackShaper(x)= tanh(x:pow(attack:attackScale)*mult)/tanh(mult);
    //attackShaper(x)= x:pow(attack:attackScale);
    attackScale(x) = (x+1):pow(7); //from 0-1 to 1-128, just to make the knob fit the aural experience better
    };
    //tanh(x^(32)*20)/tanh(20)

LookaheadPar(x,lastdown) =
( par(i,maxHoldTime,(((i+1)>(maxHoldTime-holdTime))*(currentdown(x)@(i):max(lastdown)))): seq(j,(log(maxHoldTime)/log(2)),par(k,maxHoldTime/(2:pow(j+1)),min))),
( par(i,maxAttackTime, currentdown(x)@((i+1-maxAttackTime+maxHoldTime):max(0))*(((i+1)/maxAttackTime):attackShaper)): seq(j,(log(maxAttackTime)/log(2)),par(k,maxAttackTime/(2:pow(j+1)),min)))
:min
with {
    //attackShaper(x)= x:pow(attack:attackScale);//atan((gainHS+0.0001)*128*x)/atan((gainHS+0.0001)*128);
    attackShaper(x)= tanh(x:pow(attack:attackScale)*(attack*5+.1))/tanh(attack*5+.1);
    attackScale(x) = (x+1):pow(7); //from 0-1 to 1-128, just to make the knob fit the aural experience better
}
;

// smoothing function, attack coefficient "a", release coefficient "r" and signal x
SMOOTH(a, r,  x) =
	((x     *      select2( (x < _), a, r )) +
	(_ * (1 - select2( (x < _), a, r)))) ~ (_<:_,_,_);


/*rateLimiter(baserelease,prevx,x) = prevx+newtangent:min(0)*/
/*with {*/
    /*newtangent  = select2(tangent>0,minus,plus);*/
    /*tangent     = x- prevx;*/
    /*plus        = tangent*((abs(avgChange):mymeter*-1):db2linear):min(baserelease);*/
    /*minus       = tangent;// if you have to go down, you have to go down!*/
    /*avgChange   = (abs((tangent)-(tangent@1)):integrate(IM_size)*releaseMult:_+1:pow(releasePower)-1)/200:SMOOTH(attackAVG,0.0008):tanh*changeScale;*/
       /*//select2(abs(tangent)>maxRate,tangent,maxRate);*/
    /*integrate(size,x) = delaysum(size, x)/size;*/
    /*delaysum(size) = _ <: par(i,rmsMaxSize, @(i)*(i<size)) :> _;*/
    /*};*/

rateLimiter(baserelease,prevx,x) = ((prevx+newtangent):min(0)),avgLevel
with {
    newtangent  = select2(tangent>0,minus,plus);
    tangent     = x- prevx;
  // this design reacts slower when the AVG is near 0dB GR versus when the AVG is lower, because there is no overshoot then.
  //therefore, we have a 24 dB inGain.
  // todo: maybe slightly smooth the GR curve manually around 0dB GR (probably not needed)
   plus        = (
     (baserelease)*
     (1-(((prevx - avgLevel )*((prevx - avgLevel )>0)*(antiPump:pow(2))*4):min(1)))*
     (1-(((prevx - avgLevel )*((prevx - avgLevel )<0)*(transientSpeed:pow(2)*100))))
     ):min(tangent);
      //plus        = ((tangent*speed):max(baserelease)*(1-(((prevx - avgLevel )*((prevx - avgLevel )>0)*(antiPump:pow(2))):min(1))));
//:min(baserelease)
    minus       = tangent;// if you have to go down, you have to go down!
    speed       = abs(select2(prevx<avgLevel,aboveAvg,belowAvg)):min(0.5):mymeter;
    avgLevel    = prevx:SMOOTH(releaseAVG,attackAVG):avgMeter;
    belowAvg    = ((abs(x - avgLevel ) )*releaseMult:_+1:pow(releasePower)-1)/200:tanh:pow(transientSpeed);
    aboveAvg    = 0;
    //avgChange   = (abs(x-(integrate(IM_size,prevx):SMOOTH(attackAVG,releaseAVG)))*releaseMult:_+1:pow(releasePower)-1)/200:tanh*changeScale;
       //select2(abs(tangent)>maxRate,tangent,maxRate);
    integrate(size,x) = delaysum(size, x)/size;
    delaysum(size) = _ <: par(i,rmsMaxSize, @(i)*(i<size)) :> _;
    };

/*rateLimiter(baserelease,prevx,x) = prevx+newtangent:min(0)*/
/*with {*/
    /*newtangent  = select2(tangent>0,minus,plus);*/
    /*tangent     = x- prevx;*/
    /*plus        = tangent*((abs(avgChange):mymeter*-1):db2linear):min(baserelease);*/
    /*minus       = tangent;// if you have to go down, you have to go down!*/
    /*avgChange   = (tangent:nrSignChange(IM_size)*releaseMult+1:pow(releasePower)-1)/200:SMOOTH(attackAVG,0.0008):tanh*changeScale;*/
       /*//select2(abs(tangent)>maxRate,tangent,maxRate);*/
    /*nrSignChange(size)  = _ <: par(i,rmsMaxSize, signChange(i,size)) :> _/size;*/
    /*//signChange(i,x) = ( ((x@(i)>0) && (x@(i+1)<0)));*/
    /*signChange(i,size,x) = ( ((x@(i):max(0)) * (x@(i+1)<=0)) + ((x@(i):min(0)*-1) * (x@(i+1)>0)) ) * (i<size);*/
	/*integrate(size,x) = delaysum(size, x)/size;*/
    /*delaysum(size) = _ <: par(i,rmsMaxSize, @(i)*(i<size)) :> _;*/
    /*};*/

time_ratio_target_atk = 8.0;
time_ratio_attack(t) = exp(1) / ( t * SR * time_ratio_target_atk );

rateLimit = ( rateLimiter(baserelease) ~ (_,!):(_,_));

releaseMult      = (hslider("[3]releaseMult[tooltip: ]", 1 , 0, 10 , 0.001)*100);
releasePower     = (hslider("[4]releasePower[tooltip: ]", 1, 0, 5 , 0.001));
IM_size        = (hslider("[5]IM_size[tooltip: ]",256, 1,   rmsMaxSize,   1)*44100/SR); //0.0005 * min(192000.0, max(22050.0, SR));

linearXfade(x,a,b) = a*(1-x),b*x : +;

limiter(x) = (Lookahead(x):releaseEnv(minRelease))~_+(inGain@maxHoldTime):meter:db2linear *x@maxHoldTime;

// gainComputer(x) = (Lookahead(x):releaseEnv(minRelease):rateLimit:(min(currentdown(x)@maxHoldTime),_))~(_,_):(_,!);
// gainComputer(x) = (Lookahead(x):min(currentdown(x)@maxHoldTime))~(_,0);
gainComputer(x) = (Lookahead(x):releaseEnv(minRelease))~(_,0);
// gainComputer(x) = (0:min(currentdown(x)@maxHoldTime));
//:min(currentdown(x)@maxHoldTime)// todo: remove this hack without getting overshoot
//gainComputer(x) = (Lookahead(x):releaseEnv(minRelease)<:(_,rateLimit):linearXfade((link*-1)+1))~_<:(_,rateLimit):linearXfade(link);
//gainComputer(x) = (Lookahead(x)<:(releaseEnv(minRelease),rateLimit):linearXfade(link))~_;
//gainComputer(x) = (Lookahead(x):releaseEnv(minRelease))~_;

stereoGainComputerHalf (x,y,prevy,avgLevely) =
  (
    ((Lookahead(x)<:_,_):((_,(_,((prevy,avgLevely):Lookahead(y)):min)):linearXfade(link)):releaseEnv(minRelease):(rateLimit))
    ~(bus(2))
  );

  /*(*/
    /*(((_,(_,((prevy:Lookahead(y),_):(_,!)):min)):linearXfade(link)):releaseEnv(minRelease):rateLimit)*/
    /*~((Lookahead(x)<:_,_),_):(_,!)*/
  /*);*/

stereoGainComputer(x,y) = (stereoGainComputerHalf(x,y),stereoGainComputerHalf(y,x))~((cross(2),cross(2)):cross(4)):(_,!,_,!);
//(stereoGainComputerHalf(x,y),stereoGainComputerHalf(y,x))~((_,_ <: !,_,_,!),_);



stereoLimiter(x,y)  = (stereoGainComputer(x,y) : (((meter:_+(inGain@maxHoldTime):db2linear)*x@maxHoldTime,((meter:_+(inGain@maxHoldTime):db2linear)*y@maxHoldTime)))),(stereoGainComputer(x,y):par(i, 2, db2linear ));

//faust2jaqt -t 999999 -time -sch -vs 4096 -mcd 8192 LazyLimiter.dsp  485.55s
//maxHoldTime = 1024 maxAttackTime = 1024
//jack: 78% CPU

//faust2jaqt -t 999999 -time -sch -vs 2048 -mcd 4096 LazyLimiter.dsp  485.55s
//maxHoldTime = 1024 maxAttackTime = 1024
//jack: 80% CPU
simpleStereoLimiter(x,y) = (((Lookahead(x):releaseEnv(minRelease)),(Lookahead(y):releaseEnv(minRelease))):min)~(_<:(_,_))+(inGain@maxHoldTime):meter:db2linear<:(_*x@maxHoldTime,_*y@maxHoldTime);

//simpleStereoLimiter(x,y) = (LookaheadPar(x),LookaheadPar(y):min:releaseEnv(minRelease))~(_<:(_,_))+(inGain@maxHoldTime):meter:db2linear<:(_*x@maxHoldTime,_*y@maxHoldTime);


//faust2jaqt -t 999999 -time -sch -vs 2048 -mcd 4096 LazyLimiter.dsp
//maxHoldTime = 1024 maxAttackTime = 1024
//jack: 52% CPU  169.49s
//maxHoldTime = 2048 maxAttackTime = 1024
//jack: 52% CPU 485.55s
naiveStereoLimiter(x,y) = ((gainComputer(x),gainComputer(y)):min:meter+(inGain@maxHoldTime):db2linear<:(_*x@maxHoldTime,_*y@maxHoldTime)),((gainComputer(x),gainComputer(y)):par(i, 2, db2linear));
minimalStereoLimiter(x,y) = (gainComputer((abs(x),abs(y)):max):meter+(inGain@maxHoldTime):db2linear<:(_*x@maxHoldTime,_*y@maxHoldTime)),(gainComputer((abs(x),abs(y)):max):db2linear),((((abs(x),abs(y)):max)@maxHoldTime)*db2linear(-18));
